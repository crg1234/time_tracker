<h1>Task Title: <%= @task.title %></h1>
<h2>Task Description: <%= @task.description %></h2>
<p>Task Billing Rate: â‚¬<%= @task.billing_rate %></p>

<p>Time right now:<%= Time.now %></p>

<% time_difference_in_sec = (@task.end_time.to_time.to_i - @task.start_time.to_time.to_i).abs %>
<p>Time difference from end time to start time: <%= time_difference_in_sec / 60 %> minutes</p>

<div class="container prose m-5">
  <div
    data-controller="timer"
    data-timer-from-value="2023-06-14T06:00:00.111Z"
    data-timer-to-value="2023-06-16T11:10:32.111Z"
  >
      <div data-time-target="calculateTimeDifference">
        <div class="btn btn-success" data-timer-target="startTime" data-action="click->timer#startTimeTracker">Start Timer</div>

        <div class="btn btn-danger" data-timer-target="stopTime" data-action="click->timer#stopTimeTracker">Stop Timer</div>

        <div class="btn btn-info" data-action="click->timer#calculateTimeDifference">Calculate Time Difference</div>
      </div>


      <div style="display: none" data-timer-target="before">
        Timer Started At: <time data-timer-target="fromTime"></time>
      </div>
      <div style="display: none" data-timer-target="during">
        Time Since Start: <time data-timer-target="toTimeRelative"></time>
      </div>
      <div style="display: none" data-timer-target="after">
        Timer Stopped At: <time data-timer-target="toTime"></time>
      </div>
  </div>
</div>

<%# ATTEMPTING STOPWATCH INSTEAD OF TIME DIFFERENCE BELOW %>

<div class="container-fluid">

  <div data-controller="stop_watch">

    <div class="row">
      <div class="col-sm-8" id="watchAreaContainer">
        <h3 id="stopWatchIcon"><i class="fas fa-stopwatch fa-3x"></i></h3>
        <div id="watchArea">
          <h1 id="timer" class="display-3">
            00 : 00. 000
          </h1>
          <div id="controls">
            <button class="btn btn-dark" id="toggle" data-action="click->stop_watch#toggle">
              START
            </button>
            <button class="btn btn-dark ml-2" id="lap">
              LAP
            </button>
            <button class="btn btn-dark ml-2" id="reset">
              RESET
            </button>
            <button class="btn btn-dark" id="complete">Complete Task</button>
          </div>
        </div>
      </div>
      <div class="col-sm-4" id="reportAreaContainer">
        <div id="reportArea">
          <ul class="list-group" id="lapReport">
          </ul>
        </div>
      </div>
    </div>

  </div>

</div>

<script type="text/javascript">
let laptime, lapcount = 0, firstClickOnStart = true;
let startTime, endTime;
let lapClick = [];

function timeFormatter(timeInMilliSeconds) {
  let time = new Date(timeInMilliSeconds);
  let minutes = time.getMinutes().toString();
  let seconds = time.getSeconds().toString();
  let milliseconds = time.getMilliseconds().toString();

  if( minutes.length < 2 ) {
    minutes = "0" + minutes;
  }
  if( seconds.length < 2 ) {
    seconds = "0" + seconds;
  }
  while( milliseconds.length < 3 ) {
    milliseconds = "0" + milliseconds;
  }

  return minutes + " : " + seconds + ". " + milliseconds;
}

function stopWatch(ele){
  let currentTime = 0;
  let interval;
  let offset;

  function update() {
    if(this.isOn){
      currentTime += delta();
    }
    let formattedTime = timeFormatter(currentTime);
    ele.textContent = formattedTime;
    laptime = formattedTime;
  }

  function delta() {
    const now = Date.now();
    const timePassed = now - offset;
    offset = now;
    return timePassed;
  }

  this.isOn = false;
  this.start = function() {
    if(!this.isOn) {
      interval = setInterval( update.bind(this), 10 );
      offset = Date.now();
      this.isOn = true;
    }
  }

  this.stop = function() {
    if(this.isOn) {
      clearInterval(interval);
      interval = null;
      this.isOn = false;
    }
  }

  this.reset = function(){
    if(!this.isOn){
      currentTime = 0;
      update();
      lapReport.innerText = "";
      laptime = null;
      lapcount = 0;
      firstClickOnStart = true;
      startTime = null;
      endTime = null;
      lapClick = [];
    }
  }

}

const timer = document.getElementById('timer');
const toggleBtn = document.getElementById('toggle');
const resetBtn = document.getElementById('reset');
const lapBtn = document.getElementById('lap');
const lapReport = document.getElementById('lapReport');


const watch = new stopWatch(timer);


toggleBtn.addEventListener('click', function(){
  if(watch.isOn){
    watch.stop();
    resetBtn.style.display = 'inline-block';
    lapBtn.style.display = 'none';
    toggleBtn.textContent = 'START';
  }else{
    if(firstClickOnStart){
      startTime = timeFormatter(Date.now());
      firstClickOnStart = false;
    }
    watch.start();
    resetBtn.style.display = 'none';
    lapBtn.style.display = 'inline-block';
    toggleBtn.textContent = 'STOP';
  }
});

resetBtn.addEventListener('click', function(){
  endTime = timeFormatter(Date.now());
  records.create({start_time: startTime, end_time: endTime})
          .then(newRecord => {
          console.log(newRecord);
          if(lapClick.length > 0){
            for(let elem of lapClick){
              laps.create({lap_time: elem, record_id: newRecord.id})
                  .then(result => {
                    console.log(result);
                  })
            }
          }
          })
    setTimeout(function(){
        watch.reset();
    },100);
    resetBtn.style.display = 'none';
    lapBtn.style.display = 'none';
});

lapBtn.addEventListener('click', function(){
  if(watch.isOn){
    let tempLap = timeFormatter(Date.now());
    lapClick.push(tempLap);
    lapcount ++;
    if(lapcount < 10){ lapcount = '0' + lapcount };
    const newLapTime = document.createElement('li');
    newLapTime.className = 'list-group-item';
    const lapTimeTitle = `<strong>Lap ${lapcount}</strong> - `;
    newLapTime.innerHTML = `${lapTimeTitle} ${laptime}`;
    lapReport.appendChild(newLapTime);
  }


});

</script>
